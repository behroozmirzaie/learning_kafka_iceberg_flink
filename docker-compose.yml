services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    networks:
      - learning-net
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    networks:
      - learning-net
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'

  nessie:
    image: ghcr.io/projectnessie/nessie:0.78.0
    container_name: nessie
    networks:
      - learning-net
    ports:
      - "19120:19120"

  minio:
    image: minio/minio:latest-cicd
    container_name: minio
    networks:
      - learning-net
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
    ports:
      - "9900:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"

  mc:
    image: minio/mc
    depends_on:
      - minio
    networks:
      - learning-net
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc alias set minio http://minio:9000 admin password) do echo '...waiting for minio' && sleep 1; done;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc policy set public minio/warehouse;
      exit 0;
      "

  spark-iceberg:
    image: tabulario/spark-iceberg
    container_name: spark-iceberg
    depends_on:
      mc:
        condition: service_completed_successfully
      nessie:
        condition: service_started
    networks:
      - learning-net
    ports:
      - "4040:4040"
    command: ["sleep", "infinity"]

  flink-jobmanager:
    image: apache/flink:1.18.1-scala_2.12-java11
    container_name: flink-jobmanager
    networks:
      - learning-net
    ports:
      - "8081:8081"
    depends_on:
      - nessie
      - mc
    volumes:
      - ./flink-jars:/opt/flink/usrlib
      - flink_dist:/opt/flink
    command: >
      bash -c "
        cp /opt/flink/usrlib/*.jar /opt/flink/lib/ 2>/dev/null || true &&
        /docker-entrypoint.sh jobmanager
      "
    environment:
      FLINK_PROPERTIES: "jobmanager.rpc.address: flink-jobmanager"
      # Add S3 support to Flink
      ENABLE_S3_HA: "true"
      # AWS configuration for MinIO
      AWS_REGION: "us-east-1"
      AWS_ACCESS_KEY_ID: "admin"
      AWS_SECRET_ACCESS_KEY: "password"

  flink-taskmanager:
    image: apache/flink:1.18.1-scala_2.12-java11
    container_name: flink-taskmanager
    networks:
      - learning-net
    depends_on:
      - flink-jobmanager
    volumes:
      - ./flink-jars:/opt/flink/usrlib
    command: >
      bash -c "
        cp /opt/flink/usrlib/*.jar /opt/flink/lib/ 2>/dev/null || true &&
        /docker-entrypoint.sh taskmanager
      "
    environment:
      FLINK_PROPERTIES: "jobmanager.rpc.address: flink-jobmanager"
      # Add S3 support to Flink
      ENABLE_S3_HA: "true"
      # AWS configuration for MinIO
      AWS_REGION: "us-east-1"
      AWS_ACCESS_KEY_ID: "admin"
      AWS_SECRET_ACCESS_KEY: "password"

  zeppelin:
    image: apache/zeppelin:0.11.0
    container_name: zeppelin
    networks:
      - learning-net
    ports:
      - "8080:8080"
    depends_on:
      - flink-jobmanager
      - flink-taskmanager
    volumes:
      - zeppelin_data:/opt/zeppelin/notebook
      - zeppelin_logs:/opt/zeppelin/logs
      - flink_dist:/opt/flink:ro
    environment:
      ZEPPELIN_PORT: "8080"
      # AWS configuration for MinIO (same as Flink)
      AWS_REGION: "us-east-1"
      AWS_ACCESS_KEY_ID: "admin"
      AWS_SECRET_ACCESS_KEY: "password"
      FLINK_HOME: "/opt/flink"

networks:
  learning-net:

volumes:
  zeppelin_data:
  zeppelin_logs:
  flink_dist:
